package com.atnanx.atcrowdfunding.user.controller;


import com.atnanx.atcrowdfunding.bean.TMember;
import com.atnanx.atcrowdfunding.common.ServerResponse;
import com.atnanx.atcrowdfunding.user.vo.req.MemberRegisterVo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.UUID;


@Api
@RestController
@RequestMapping("/user")
@Slf4j
public class UserController {

    @ApiImplicitParams({
            @ApiImplicitParam(name = "loginacct", value = "账号（手机号）", required = true),
            @ApiImplicitParam(name = "password", value = "密码", required = true)
    })
    @RequestMapping("/login")
    public ServerResponse login(@RequestParam("username") String username,
                                @RequestParam("password") String password) {

        return ServerResponse.createBySuccess("", new TMember());
    }


    @ApiOperation("用户注册")
    @PostMapping("/register")
    public ServerResponse<String> register(MemberRegisterVo memberRegisterVo) {

        log.debug("{} 用户正在注册：", memberRegisterVo.getMobile());

        return null;
    }

    @ApiOperation("获取短信验证码")
    @PostMapping("/sendsms")
    public ServerResponse<String> sendSms(@RequestParam("mobile") String mobile) {
        String code = UUID.randomUUID().toString().replace("-", "").substring(0, 5);
//        smsTemplate.sendCodeSms(mobile,code);

        //cookie/session；浏览器
        /**
         * 浏览器：
         *      同一个页面共享：pageContext
         *      同一次请求：request
         *      同一次会话：session：Map
         *      同一个应用：application；
         *
         * 多端了；
         *      同一个页面共享：各端使用自己的方式
         *      同一次请求共享数据：将数据以json写出去；
         *      同一次会话：把数据一个公共的地方【redis】，
         *                ：把数据一个公共的地方【redis】，
         *
         *                success("").msg("短信发送完成")
         */

        return ServerResponse.createBySuccess();
    }
}
