<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--导入属性配置-->
    <properties resource="jdbc.properties"></properties>

    <!--指定特定数据库的jdbc驱动jar包的位置-->
    <!--<classPathEntry location="${db.driverLocation}"/>-->

    <!--
        context:构建逆向工程的上下文配置
        targetRuntime： 生成逆向工程代码的规范风格
                MyBatis3  豪华版
                MyBatis3Simple	简单版
     -->
    <context id="default" targetRuntime="MyBatis3">

        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="${mysql.driverClassName}"
                connectionURL="${mysql.url}"
                userId="${mysql.username}"
                password="${mysql.password}">
        </jdbcConnection>


        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <!--
		javaTypeResolver:java类型处理
			从数据库中获取数据时，解析类型时，有可能double或float有小数精度问题
			设置是否将double或float强制转为BigDecimal处理
	 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径 保存bean的目标项目 	.\代表 当前路径下
        -->
        <!--<javaModelGenerator targetPackage="com.mmall.pojo" targetProject=".\src\main\java">-->
        <javaModelGenerator targetPackage="com.atnanx.atcrowdfunding.core.bean" targetProject="./src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <!-- 在targetPackage的基础上，根据数据库的schema(模式)再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法-->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!--mapper映射文件(sql Mapper)生成所在的目录 为每一个数据库的表生成对应的SqlMap文件
        	mapper映射文件必须和mapper接口在同一个包下-->
        <!--<sqlMapGenerator targetPackage="mappers" targetProject=".\src\main\resources">-->
        <sqlMapGenerator targetPackage="mappers" targetProject="../atcrowdfunding-order/src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>


        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象（SQL生成在annotation中）
                type="MIXEDMAPPER",生成基于注解的Java Model，相应的Mapper对象(mapper接口)，并适当添加合适的Annotation，但是XML会生成在XML中；
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->

        <!-- targetPackage：mapper接口dao生成的suppress位置 -->
        <!--<javaClientGenerator type="XMLMAPPER" targetPackage="com.mmall.dao" targetProject=".\src\main\java">-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.atnanx.atcrowdfunding.project.mapper" targetProject="../atcrowdfunding-order/src/main/java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>


        <!--
            table:指定要逆向分析的表和表生成的bean的命名规则
                tableName:需要逆向分析的表名
                domainObjectName: 生成javabean的类名
         -->
            <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
               column:要重新设置的列名；
               注意，一个table元素中可以有多个columnOverride元素哈~
               可以使用property属性来指定列要生成的属性名称
               jdbcType用于指定该列的JDBC类型
               javaType用于指定生成的domain的属性类型，使用类型的全限定名

               typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
                 可以这样写 <propertyname="jdbcType" value=""/>
                 ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现

                 column:指定要忽略的列的名字；
                delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false
                <table tableName="mmall_user" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>
            -->


          <table tableName="%" />

        <!-- geelynote mybatis插件的搭建 -->
    </context>
</generatorConfiguration>